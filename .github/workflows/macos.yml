name: Install and Run RustDesk Server on macOS

on:
  push:
    branches:
      - main

jobs:
  install_rustdesk:
    runs-on: macos-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download RustDesk macOS version
        run: |
          # Use curl with a user-agent to mimic a browser and handle redirects
          curl -L -A "Mozilla/5.0" -D headers.txt -o RustDesk.dmg https://github.com/rustdesk/rustdesk/releases/download/1.3.9/rustdesk-1.3.9-x86_64.dmg || { echo 'Curl failed!'; exit 1; }

          # Output the response headers to check content type
          echo "Response Headers:"
          cat headers.txt

          # Check if the file is a valid DMG
          file RustDesk.dmg
          if [[ $(file RustDesk.dmg) != *"Apple Disk Image"* ]]; then
            echo "Download failed or not a valid DMG. Aborting."
            exit 1
          fi

      - name: Mount DMG
        run: |
          hdiutil attach RustDesk.dmg || { echo 'Failed to mount DMG!'; exit 1; }

      - name: Install RustDesk
        run: |
          sudo cp -R /Volumes/RustDesk*/RustDesk.app /Applications/ || { echo 'Failed to install RustDesk!'; exit 1; }
          hdiutil detach /Volumes/RustDesk* || { echo 'Failed to unmount DMG!'; exit 1; }

      - name: Launch RustDesk Server
        run: |
          open -g -a "/Applications/RustDesk.app" || { echo 'Failed to open RustDesk!'; exit 1; }
          sleep 30  # Give it time to initialize

      - name: Search for ID and Password in Logs or Files
        run: |
          echo "Searching for RustDesk ID and Password..."
          
          # Search common paths for the ID and Password
          CONFIG_PATHS=(
            "$HOME/Library/Preferences/com.rustdesk.server.plist"
            "/Library/Preferences/com.rustdesk.server.plist"
            "$HOME/.rustdesk"
            "/var/log/rustdesk.log"
          )

          FOUND=0
          for path in "${CONFIG_PATHS[@]}"; do
            if [ -f "$path" ]; then
              echo "Searching in: $path"
              ID=$(grep -i "ID" "$path" 2>/dev/null || echo "Not found")
              PASSWORD=$(grep -i "Password" "$path" 2>/dev/null || echo "Not found")
              echo "Found ID and Password:"
              echo "ID: $ID"
              echo "Password: $PASSWORD"
              FOUND=1
              break
            fi
          done
